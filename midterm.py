#! /usr/bin/env python

"""
File: midterm.py

Copyright (c) 2016 Taylor Patti

License: MIT

This module provides some insights into chaos via the logistic equation. It provides
functions for creating logistic equation arrays, graphing a single array, and graphing arrys of
various growth parameters on a single plot with advanced logistic points only, in such a fashion that the value
be against the growth parameter variable.

"""


import numpy as np
import matplotlib.pyplot as mp
import math as math

def sequence(x0, r, N=100):
    """Produces a logistic equation array and element counter array up to point N
    with given initial condition x0 and growth parameter r."""
    n_array = np.arange(N+1)
    x_array = np.zeros(N+1)
    x_array[0] = x0
    for i in range(N):
        x_array[i+1] = r * x_array[i] * (1 - x_array[i])
    return n_array, x_array

def graph(x0, r, N=100):
    """Graphs a single logistic equation vs element counter generated by
    the sequence function call."""
    plotdata = sequence(x0, r, N)
    mp.plot(plotdata[0], plotdata[1], 'ko')
    mp.xlim([0, 100])
    mp.xlabel('n value')
    mp.ylabel('Logistic Map Output')
    
def big_graph():
    """Plots the final 100 points of 200 point logistic equations vs growth parameters
    for a mesh of growth parameters ranging from 2.9 to 4 with perforations of 0.0001."""
    spaces  = int(math.ceil((4 - 2.9) / 0.0001))
    r_mesh = np.linspace(2.9, 4, spaces)
    r_temp = np.zeros(200+1)
    for r in r_mesh:
        plotdata = sequence(0.5, r, 200)
        r_temp.fill(r)
        mp.plot(r_temp[100:-1], plotdata[1][100:-1], 'ko', markersize=0.001)
    mp.xlim([2.9, 4])
    
def test_no_biffurcation_small_r():
    """Ensures that there is no bifurcation at growth parameter of r = 2.2, a value too small to
    cause bifurcation in the logistic equation."""
    test_data = sequence(0.5, 2.2)
    apt = np.fabs(test_data[1][-1] - test_data[1][-2]) < 1e-5
    msg = 'Improper logistic map. Bifurcation has started at too low of an r value.'
    assert apt, msg
    
def test_no_population():
    """Ensures that an initial population of zero stays at zero, even with high growth rate. This is
    required by the equation specifications and by the physical systems it represents."""
    test_data = sequence(0, 3.7)
    apt = np.fabs(test_data[1][-1]) < 1e-5
    msg = 'Improper population calculation. Zero initial population should yield zero population.'
    assert apt, msg
